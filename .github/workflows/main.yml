# .github/workflows/dbup.yml
name: CI: DbUp con SQL Server service container

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  migrate:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }} # ya lo creaste
        ports:
          - "1433:1433"
        # ðŸ‘‡ IMPORTANTE: no pongas healthcheck aquÃ­

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      # Espera activa hasta que SQL Server responda
      - name: Esperar a SQL Server (hasta 5 min)
        shell: bash
        run: |
          echo "Esperando a SQL Server (sqlcmd) ..."
          for i in {1..60}; do
            /opt/mssql-tools18/bin/sqlcmd -C -S 127.0.0.1,1433 -U sa -P "${{ secrets.MSSQL_SA_PASSWORD }}" -Q "SELECT 1" && exit 0
            sleep 5
          done
          echo "SQL Server no respondiÃ³ a tiempo"; exit 1

      - name: Ejecutar migraciones (DbUp)
        shell: bash
        env:
          CONNECTION_STRING: "Server=127.0.0.1,1433;Initial Catalog=migraciondb;User ID=sa;Password=${{ secrets.MSSQL_SA_PASSWORD }};Encrypt=True;TrustServerCertificate=True"
        run: |
          dotnet restore
          dotnet build -c Release --no-restore
          dotnet run -c Release --project ./MigradorDbUp/MigradorDbUp.csproj -- --ci 2>&1 | tee migrations.log

      - name: Guardar evidencia (log)
        uses: actions/upload-artifact@v4
        with:
          name: dbup-log
          path: migrations.log
